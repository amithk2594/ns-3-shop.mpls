/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/simulator-module.h"
#include "ns3/node-module.h"
#include "ns3/helper-module.h"
#include "ns3/mpls-module.h"
#include "ns3/ldp-module.h"
#include "ns3/loopback-net-device.h"
#include "ns3/onoff-application.h"
#include "ns3/packet-sink.h"
#include "ns3/ipv4-list-routing.h"
#include "ns3/ipv4-global-routing.h"
#include "ns3/ipv4-routing-table-entry.h"
#include "ns3/ipv4-flow-classifier.h"

#include <iostream>
#include <fstream>
#include <numeric>

using namespace ns3;
using namespace ldp;

NS_LOG_COMPONENT_DEFINE ("LDP");

const bool txData = false;
ConstantVariable callRate(1);
ConstantVariable callDuration(0.0); //   static ErlangVariable erl(6, 6);
const double simulationDuration = 1800.0;

std::ofstream trunkTrace;
std::ofstream trace;

uint32_t totalTrunks = 0;

typedef std::vector<Ptr<Node> > NodeVector;
typedef std::vector<NodeVector> NodeVectors;
typedef std::vector<Ipv4Address> Ipv4Vector;

struct Path
{
  Ptr<Node> nodeFrom;
  Ptr<Node> nodeTo;
  Ipv4Vector path;
};

class Call: public SimpleRefCount<Call>
{
public:
  Call (): n1 (0), m1 (0), n2 (0), m2 (0), i1 (-1), i2 (-2),trunk (-1), start (0), end (0) {};
  void Print (std::ostream& os)
  {
    if (n1 != 0)
      {
        os << n1->GetId ();
      }
    else
      {
        os << "?";
      }

    if (m1 != 0)
      {
        os << "[" << m1->GetId () << "]";
      }
    else
      {
        os << "[?]";
      }

    os << " <---> ";

    if (n2 != 0)
      {
        os << n2->GetId ();
      }
    else
      {
        os << "?";
      }

    if (m2 != 0)
      {
        os << "[" << m2->GetId () << "]";
      }
    else
      {
        os << "[?]";
      }
  }

  Ptr<Node> n1;
  Ptr<Node> m1;
  Ptr<Node> n2;
  Ptr<Node> m2;
  uint32_t i1;
  uint32_t i2;
  uint32_t trunk;
  double start;
  double end;
};

typedef std::vector<Path> PathVector;
typedef std::vector<std::pair<Ptr<Node>, std::list<Ptr<Node> > > > HostVector;
typedef std::list<Ptr<Call> > CallList;

PathVector paths;
HostVector hosts;
CallList calls;

Ptr<Node> teserver;
NodeContainer routers;
NodeContainer networks;
EventId nextCallEvent;

std::ostream& operator<< (std::ostream& os, const Path& p)
{
  os << p.nodeFrom->GetId () << " -> " << p.nodeTo->GetId () << ": ";
  for (Ipv4Vector::const_iterator i = p.path.begin (); i != p.path.end (); ++i)
    {
      os << (*i) << " -> ";
    }

  return os;
}

std::ostream& operator<< (std::ostream& os, Ptr<Call> c)
{
  if (c == 0)
    {
      os << "None";
    }
  else
    {
      c->Print (os);
    }

  return os;
}

Ipv4Address GetInterface (Ptr<Node> n);

Ptr<Call>
GetCall (uint32_t trunk)
{
  for (CallList::const_iterator i = calls.begin (); i != calls.end (); ++i)
    {
      if ((*i)->trunk == trunk)
        {
          return *i;
        }
    }

  return 0;
}

void
RemoveCall (uint32_t trunk)
{
  for (CallList::iterator i = calls.begin (); i != calls.end (); ++i)
    {
      if ((*i)->trunk == trunk)
        {
          (*i)->n1 = 0;
          (*i)->m1 = 0;
          (*i)->n2 = 0;
          (*i)->m2 = 0;
          calls.erase (i);
          break;
        }
    }
}

void
SetLocation (Ptr<Node> node, double x, double y)
{
  Ptr<CanvasLocation> loc = node->GetObject<CanvasLocation> ();
  if (loc == 0)
    {
      loc = CreateObject<CanvasLocation> ();
      node->AggregateObject (loc);
    }
  Vector vec (x, y, 0);
  loc->SetLocation (vec);
}

void
PrintTables ()
{
  LabelInformationBaseHelper libtable;
  for (NodeContainer::Iterator i = routers.Begin(); i != routers.End (); ++i)
    {
      libtable.SetNode (*i);
      libtable.Print ();
    }

}

bool terminated = false;

void Start ();

void
DeleteTrunk (uint32_t trunk)
{
  NS_LOG_INFO ("Delete trunk "<< trunk);
                        
  teserver->GetObject<TeServer> ()->DeleteTrunk (trunk);
  RemoveCall (trunk);

  if (nextCallEvent.IsExpired () && !terminated)
    {
      nextCallEvent = Simulator::ScheduleNow (&Start);
    }
    
}

void
TrunkCreated (uint32_t trunk)
{
  Time stop = Seconds (callDuration.GetValue ());

  Ptr<Call> call = GetCall (trunk);
  if (call == 0)
    {
      NS_LOG_ERROR ("Error: invalid trunk, not in local database");
      return;
    }

  call->end = Simulator::Now ().GetSeconds ();

  trunkTrace << call->trunk << "," << call->m1->GetId () << "," << call->m2->GetId () << ","
             << call->start << "," << call->end << ";" << std::endl;

  NS_LOG_INFO ("Trunk "<< trunk << " establishing complete at " << Simulator::Now ().GetSeconds () << "s"
                        << ", call duration " << stop.GetSeconds () << "s");

  if (txData)
    {
      Ptr<OnOffApplication> onoff = DynamicCast<OnOffApplication> (call->n1->GetApplication (0));
      NS_ASSERT_MSG (onoff != 0, "impossible!");
      onoff->SetRemote (InetSocketAddress (GetInterface (call->n2), 1234));
      onoff->StartStop (stop);

      onoff = DynamicCast<OnOffApplication> (call->n2->GetApplication (0));
      NS_ASSERT_MSG (onoff != 0, "impossible!");
      onoff->SetRemote (InetSocketAddress (GetInterface (call->n1), 1234));
      onoff->StartStop (stop);
    }

  totalTrunks++;
  Simulator::Schedule (stop, &DeleteTrunk, trunk);
}

Path
SelectPath (Ptr<Node> n1, Ptr<Node> n2)
{
  PathVector v;
  for (PathVector::const_iterator i = paths.begin (); i != paths.end (); ++i)
    {
      if ((*i).nodeFrom == n1 && (*i).nodeTo == n2)
        {
          v.push_back (*i);
        }
    }

  NS_ASSERT_MSG (v.size () > 0, "No path from " << n1->GetId () << " to " << n2->GetId ());
  static UniformVariable x;
  return v[x.GetInteger (0, 1000) % v.size ()];
}

void
SelectHost (Ptr<Call> call)
{
  static UniformVariable x;
  uint32_t index;
  while (true)
    {
      index = x.GetInteger (0, hosts.size () - 1);
      if (hosts[index].first != call->m1)
        {
          NS_ASSERT_MSG (hosts[index].second.size () == 1, "SelectHost(): size != 1");
          break;
        }
    }

  std::list<Ptr<Node> >::iterator i = hosts[index].second.begin ();

  if (call->n1 == 0)
    {
      call->n1 = *i;
      call->m1 = hosts[index].first;
      call->i1 = index;
    }
  else
    {
      call->n2 = *i;
      call->m2 = hosts[index].first;
      call->i2 = index;
    }
}

Ptr<NetDevice>
GetNextHopDevice (Ptr<NetDevice> dev)
{
  Ptr<Channel> ch = dev->GetChannel ();
  NS_ASSERT (ch->GetNDevices () == 2);
  if (ch->GetDevice (0) == dev)
    {
      return ch->GetDevice (1);
    }
  return ch->GetDevice (0);
}

Ipv4Address
GetNextInterface (Ptr<Node> n1, Ptr<Node> n2)
{
  for (uint32_t i = 0; i < n1->GetNDevices (); i++)
    {
      Ptr<NetDevice> dev = n1->GetDevice (i);
      if (DynamicCast<LoopbackNetDevice> (dev) != 0)
        {
          continue;
        }

      Ptr<NetDevice> adev = GetNextHopDevice (dev);

      if (adev->GetNode () == n2)
        {
          Ptr<Ipv4L3Protocol> ipv4 = n2->GetObject<Ipv4L3Protocol> ();
          for (uint32_t j = 0; j < ipv4->GetNInterfaces (); ++j)
            {
              Ptr<Ipv4Interface> interface = ipv4->GetInterface (j);
              if (interface->GetDevice () == adev)
                {
                  return interface->GetAddress (0).GetLocal ();
                }
            }
        }
    }
  NS_ASSERT_MSG (false, "GetNextInterface (): next-hop interface unavailable");
  return Ipv4Address ();
}

Ipv4Address
GetInterface (Ptr<Node> n)
{
  Ptr<Ipv4L3Protocol> ipv4 = n->GetObject<Ipv4L3Protocol> ();
  for (uint32_t j = 0; j < ipv4->GetNInterfaces (); ++j)
    {
      Ipv4Address addr = ipv4->GetAddress (j, 0).GetLocal ();
      if (addr != Ipv4Address ("127.0.0.1"))
        {
          return addr;
        }
    }

  NS_ASSERT_MSG (false, "GetInterface (): no available interface");
  return Ipv4Address ();
}

Ipv4Address
GetInterfaceForDestination (Ptr<Node> n, const Ipv4Address &dest)
{
  Ptr<Ipv4L3Protocol> ipv4 = n->GetObject<Ipv4L3Protocol> ();
  Ptr<Ipv4ToMplsRouting> r1 = DynamicCast<Ipv4ToMplsRouting> (ipv4->GetRoutingProtocol ());
  Ptr<Ipv4ListRouting> r2 = DynamicCast<Ipv4ListRouting> (r1->GetRoutingProtocol ());
  int16_t priority;
  Ptr<Ipv4GlobalRouting> r3 = DynamicCast<Ipv4GlobalRouting> (r2->GetRoutingProtocol (1, priority));
  for (uint32_t i = 0; i < r3->GetNRoutes (); ++i)
    {
      if (r3->GetRoute (i)->GetDest () == dest)
        {
          return ipv4->GetAddress (r3->GetRoute (i)->GetInterface (), 0).GetLocal ();
        }
    }

  NS_ASSERT_MSG (false, "GetInterfaceForDestination (): no available interface");
  return Ipv4Address();
}

bool
VectorHasNode (const NodeVector &v, Ptr<Node> n)
{
  for (NodeVector::const_iterator i = v.begin (); i != v.end (); ++i)
    {
      if ((*i) == n)
        {
          return true;
        }
    }

  return false;
}

void
AddNodeToPath (NodeVectors &vv, NodeVector v, Ptr<Node> n1, Ptr<Node> n2, uint32_t maxHopCount)
{
  if (maxHopCount == 0)
    {
      return;
    }

  v.push_back (n1);

  if (n1 == n2)
    {
      vv.push_back (v);
      return;
    }

  for (uint32_t i = 0; i < n1->GetNDevices (); i++)
    {
      Ptr<NetDevice> dev = n1->GetDevice (i);
      if (DynamicCast<LoopbackNetDevice> (dev) != 0)
        {
          continue;
        }
      Ptr<Node> next = GetNextHopDevice (dev)->GetNode ();
      if (next->GetObject<MplsRoutingProtocol> () == 0)
        {
          continue;
        }

      if (!VectorHasNode (v, next))
        {
          AddNodeToPath (vv, v, next, n2, maxHopCount - 1);
        }
    }
}

void
AddPath (Ptr<Node> n1, Ptr<Node> n2, uint32_t maxHopCount)
{
  NodeVectors all;
  AddNodeToPath (all, NodeVector(), n1, n2, maxHopCount);

  for (NodeVectors::const_iterator i = all.begin (); i != all.end (); ++i)
    {
      Ipv4Vector v;
      v.push_back (GetInterfaceForDestination (n1, Ipv4Address ("10.1.100.2")));
      Ptr<Node> first = n1;
      NodeVector::const_iterator j = (*i).begin () + 1;
      while (j != (*i).end ())
        {
          v.push_back (GetNextInterface (first, (*j)));
          first = *j;
          j++;
        }
      Path p;
      p.nodeFrom = n1;
      p.nodeTo = n2;
      p.path = v;
      paths.push_back (p);
    }
}

void
AddPaths (Ptr<Node> n1, Ptr<Node> n2, uint32_t maxHopCount)
{
  AddPath (n1, n2, maxHopCount);
  AddPath (n2, n1, maxHopCount);
}

void
AddHosts (uint32_t count, Ptr<Node> lnk, Ptr<Node> n, const char* base, double x, double y)
{
  NodeContainer c;
  c.Create (count);
  InternetStackHelper ipv4;
  ipv4.Install (c);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("1Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("4ms"));

  Ipv4AddressHelper address;
  address.SetBase (base, "255.255.255.0");

  std::list<Ptr<Node> > lst;
  for (NodeContainer::Iterator i = c.Begin (); i != c.End (); ++i)
    {
      NetDeviceContainer devices = pointToPoint.Install (lnk, (*i));
      address.Assign(devices);
      address.NewNetwork ();
      lst.push_back (*i);
      SetLocation ((*i), x,  y);
    }

//  OnOffHelper onoff ("ns3::UdpSocketFactory", Address (InetSocketAddress (Ipv4Address::GetAny (), 1234)));
//  onoff.SetAttribute ("OnTime", RandomVariableValue (ConstantVariable (1)));
//  onoff.SetAttribute ("OffTime", RandomVariableValue (ConstantVariable (0)));
//  onoff.Install (c);

//  PacketSinkHelper sink ("ns3::UdpSocketFactory", Address (InetSocketAddress (Ipv4Address::GetAny (), 1234)));
//  sink.Install (c);
  HostVector::iterator i = hosts.begin ();
  for (; i != hosts.end (); ++i)
    {
      if ((*i).first == n)
        {
          (*i).second.insert((*i).second.end (), lst.begin (), lst.end ());
          return;
        }
    }
    
  hosts.push_back (make_pair (n, lst));    
}

std::vector<uint32_t> actives;

Ptr<Call>
EstablishCall ()
{
  Ptr<Call> c = Create<Call> ();
  SelectHost (c);
  SelectHost (c);
  Path p1 = SelectPath (c->m1, c->m2);
  Path p2 = SelectPath (c->m2, c->m1);

  actives.push_back (calls.size ());
  
  NS_LOG_INFO ("Active calls: " << calls.size ());
  NS_LOG_INFO ("Start trunk establish: " << c << " at " << Simulator::Now ().GetSeconds () << "s");
  NS_LOG_INFO (p1);
  NS_LOG_INFO (p2);

  Ipv4Vector path1 = p1.path;
  path1.push_back (GetInterface(c->n2));

  Ipv4Vector path2 = p2.path;
  path2.push_back (GetInterface(c->n1));

  c->trunk = teserver->GetObject<TeServer> ()->CreateTrunk (path1, path2);
  c->start = Simulator::Now ().GetSeconds ();
  calls.push_back (c);
  return c;
}

void
Start ()
{
  //static ErlangVariable erl(1, 6);
  if (EstablishCall () == 0)
    {
      NS_ASSERT_MSG (false, "EstablishCall () == 0");
      return;
    }
  
  if (!terminated)
    {
      nextCallEvent = Simulator::Schedule (Seconds (callRate.GetValue ()), &Start);
    }
}

void
Stress ()
{
  double rate = callRate.GetValue () / 1.5;
  if (rate < 0.0003)
    {
      NS_LOG_DEBUG ("Stress complete" << Simulator::Now ().GetSeconds ());
      LogComponentEnable("LDP", LOG_LEVEL_INFO);
      nextCallEvent.Cancel ();
      terminated = true;
      Simulator::Stop (Seconds(5));
    }
  else
    {
      callRate = ConstantVariable (rate);
      NS_LOG_DEBUG ("***** Increase stress " << Simulator::Now ().GetSeconds () << " rate=" << 1/rate << " 1/rate=" << rate << " *****");
      Simulator::Schedule (Seconds (2), &Stress);
    }
}

typedef std::map<uint32_t, FlowMonitor::FlowStats> FlowStatsMap;
FlowStatsMap flowStatsSnapshot;

FlowMonitor::FlowStats
FlowStatsDiff (const FlowMonitor::FlowStats &a,  const FlowMonitor::FlowStats &b)
{
  FlowMonitor::FlowStats r;
  r.delaySum = a.delaySum - b.delaySum;
  r.txBytes = a.txBytes - b.txBytes;
  r.rxBytes = a.rxBytes - b.rxBytes;
  r.txPackets = a.txPackets - b.txPackets;
  r.rxPackets = a.rxPackets - b.rxPackets;
  r.lostPackets = a.lostPackets - b.lostPackets;
  r.bytesDropped.push_back (std::accumulate (a.bytesDropped.begin (), a.bytesDropped.end (), 0) -
                   std::accumulate (b.bytesDropped.begin (), b.bytesDropped.end (), 0));
  return r;
}

void
WriteFlow (std::ostream &out, const FlowMonitor::FlowStats &s)
{
  double stat;
  if (calls.size () == 0)
    {
      stat = 0;
    }
  else
    {
      stat = std::accumulate (actives.begin (), actives.end (), 0.0) / actives.size ();
    }

  actives = std::vector<uint32_t> ();

  NS_LOG_DEBUG ("Average calls number: " << stat << ", at this moment " << calls.size ());
  NS_LOG_DEBUG ("Create snapshot: " << Simulator::Now().GetSeconds () << ","
                                  << s.delaySum.GetSeconds () << ","
                                  << s.txBytes << ","
                                  << s.rxBytes << ","
                                  << s.txPackets << ","
                                  << s.rxPackets << ","
                                  << s.lostPackets << ","
                                  << std::accumulate (s.bytesDropped.begin (), s.bytesDropped.end (), 0));

  out << Simulator::Now().GetSeconds () << ","
      << s.delaySum.GetSeconds () << ","
      << s.txBytes << ","
      << s.rxBytes << ","
      << s.txPackets << ","
      << s.rxPackets << ","
      << s.lostPackets << ","
      << std::accumulate (s.bytesDropped.begin (), s.bytesDropped.end (), 0)
      << stat
      << ";" << std::endl;
}

void
Stats (Ptr<FlowMonitor> flowmon)
{
  FlowStatsMap stats = flowmon->GetFlowStats ();
  std::vector<FlowMonitor::FlowStats> aggregate;
  
  for (FlowStatsMap::iterator i = stats.begin (); i != stats.end (); ++i)
    {
      FlowMonitor::FlowStats s = (*i).second;
      FlowStatsMap::iterator it = flowStatsSnapshot.find ((*i).first);
      if (it == flowStatsSnapshot.end ())
        {
          aggregate.push_back (s);
        }
      else
        {
          FlowMonitor::FlowStats d = FlowStatsDiff (s, (*it).second);
          aggregate.push_back (d);
        }
    }

  FlowMonitor::FlowStats s;
  s.txBytes = 0;
  s.rxBytes = 0;
  s.txPackets = 0;
  s.rxPackets = 0;
  s.lostPackets = 0;

  Time delaySum = Seconds (0);
  uint32_t delayCount = 0;
  
  for (std::vector<FlowMonitor::FlowStats>::iterator i = aggregate.begin (); i != aggregate.end (); ++i)
    {
      if ((*i).delaySum.GetSeconds () > 0)
        {
          delaySum += (*i).delaySum;
          delayCount++;
        }

      s.txBytes += (*i).txBytes;
      s.rxBytes += (*i).rxBytes;
      s.txPackets += (*i).txPackets;
      s.rxPackets += (*i).rxPackets;
      s.lostPackets += (*i).lostPackets;
      s.bytesDropped.push_back (std::accumulate ((*i).bytesDropped.begin (), (*i).bytesDropped.end (), 0));
    }

  if (delayCount > 0)
    {
      delaySum = Seconds (delaySum.GetSeconds () / delayCount);
    }

  s.delaySum = delaySum;
  
  WriteFlow (trace, s);

  flowStatsSnapshot = stats;
  Simulator::Schedule (Seconds(0.1), &Stats, flowmon);
}

int
main (int argc, char *argv[])
{
//  LogComponentEnable("UdpEchoClientApplication", LOG_LEVEL_INFO);
//  LogComponentEnable("UdpEchoServerApplication", LOG_LEVEL_INFO);

  LogComponentEnable("LDP", LOG_LEVEL_DEBUG);
//  LogComponentEnable("OnOffApplication", LOG_LEVEL_DEBUG);
//  LogComponentEnable("TrunkUtilization", LOG_LEVEL_ALL);
//  LogComponentEnable("TeServer", LOG_LEVEL_ALL);
//  LogComponentEnable("LdpConstraintBasedRouting", LOG_LEVEL_ALL);

  Ipv4AddressHelper address;
  NetDeviceContainer devices;
  PointToPointHelper pointToPoint;

  Ptr<Node> zeroNode = Create<Node> ();

  networks.Create (5);
  teserver = CreateObject<Node> ();
  NodeContainer edge;
  NodeContainer core;
  edge.Create (6);
  core.Create (4);
  routers.Add (edge);
  routers.Add (core);

  InternetStackHelper internet;
  internet.Install (networks);
  internet.Install (teserver);

  MplsStackHelper mpls;
  mpls.Install (routers);

  NodeContainer n;
  n.Add (zeroNode);
  n.Add (networks);
  n.Add (teserver);
  n.Add (routers);
  
  NodeContainer routersAndServer;
  routersAndServer.Add (routers);
  routersAndServer.Add (teserver);

  // Networks configuration
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("8Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("4ms"));

  devices = pointToPoint.Install (n.Get(2), n.Get(8));
  address.SetBase ("10.10.1.0", "255.255.255.0");
  address.Assign(devices);
  devices = pointToPoint.Install (n.Get(3), n.Get(9));
  address.SetBase ("10.10.2.0", "255.255.255.0");
  address.Assign(devices);
  devices = pointToPoint.Install (n.Get(3), n.Get(10));
  address.SetBase ("10.10.3.0", "255.255.255.0");
  address.Assign(devices);
  devices = pointToPoint.Install (n.Get(4), n.Get(11));
  address.SetBase ("10.10.4.0", "255.255.255.0");
  address.Assign(devices);
  devices = pointToPoint.Install (n.Get(4), n.Get(12));
  address.SetBase ("10.10.5.0", "255.255.255.0");
  address.Assign(devices);
  devices = pointToPoint.Install (n.Get(5), n.Get(12));
  address.SetBase ("10.10.6.0", "255.255.255.0");
  address.Assign(devices);

  // Te Server
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("12Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

  Ptr<TeServer> teApp = CreateObject<TeServer> ();
  teApp->SetOperationSuccessCallback (MakeCallback (&TrunkCreated));
  n.Get (6)->AggregateObject (teApp);
  devices = pointToPoint.Install (n.Get (13), n.Get (6));
  address.SetBase ("10.1.100.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices.Get (0));

  // Routers
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("10Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

  devices = pointToPoint.Install (n.Get(7), n.Get(8));
  address.SetBase ("10.1.1.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(7), n.Get(13));
  address.SetBase ("10.1.2.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(7), n.Get(14));
  address.SetBase ("10.1.3.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);

  devices = pointToPoint.Install (n.Get(8), n.Get(9));
  address.SetBase ("10.1.4.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(8), n.Get(14));
  address.SetBase ("10.1.5.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);

  devices = pointToPoint.Install (n.Get(9), n.Get(10));
  address.SetBase ("10.1.6.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(9), n.Get(15));
  address.SetBase ("10.1.7.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);

  devices = pointToPoint.Install (n.Get(10), n.Get(11));
  address.SetBase ("10.1.8.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(10), n.Get(15));
  address.SetBase ("10.1.9.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);

  devices = pointToPoint.Install (n.Get(11), n.Get(12));
  address.SetBase ("10.1.10.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(11), n.Get(16));
  address.SetBase ("10.1.11.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);

  devices = pointToPoint.Install (n.Get(12), n.Get(13));
  address.SetBase ("10.1.12.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(12), n.Get(16));
  address.SetBase ("10.1.13.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);

  devices = pointToPoint.Install (n.Get(13), n.Get(14));
  address.SetBase ("10.1.14.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(13), n.Get(15));
  address.SetBase ("10.1.15.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(13), n.Get(16));
  address.SetBase ("10.1.16.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);

  devices = pointToPoint.Install (n.Get(14), n.Get(15));
  address.SetBase ("10.1.17.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);
  devices = pointToPoint.Install (n.Get(14), n.Get(16));
  address.SetBase ("10.1.18.0", "255.255.255.0");
  address.Assign (devices);
  mpls.Assign (devices);

  for (NodeContainer::Iterator i = core.Begin (); i != core.End (); ++i)
    {
      (*i)->AggregateObject (CreateObject<LdpProtocol> ());
      (*i)->AggregateObject (CreateObject<LdpConstraintBasedRouting> ());
    }

  for (NodeContainer::Iterator i = edge.Begin (); i != edge.End (); ++i)
    {
      (*i)->AggregateObject (CreateObject<LdpProtocol> ());
      (*i)->AggregateObject (CreateObject<LdpConstraintBasedRouting> ());
      (*i)->AggregateObject (CreateObjectWithAttributes<TrunkUtilization> ("TeServerAddress", Ipv4AddressValue ("10.1.100.2")));
    }

  AddHosts (1, n.Get (1), n.Get (8), "192.1.1.0", -2, -2);
  AddHosts (1, n.Get (3), n.Get (9), "192.10.1.0", -2, 2);
  AddHosts (1, n.Get (4), n.Get (11), "192.20.1.0", 2, 2);
  AddHosts (1, n.Get (5), n.Get (12), "192.30.1.0", 2.5, 0);
  
  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();

  AddPaths (n.Get(8), n.Get(9), 4);
  AddPaths (n.Get(8), n.Get(10), 4);
  AddPaths (n.Get(8), n.Get(11), 4);
  AddPaths (n.Get(8), n.Get(12), 4);
  AddPaths (n.Get(9), n.Get(10), 4);
  AddPaths (n.Get(9), n.Get(11), 4);
  AddPaths (n.Get(9), n.Get(12), 4);
  AddPaths (n.Get(10), n.Get(11), 4);
  AddPaths (n.Get(10), n.Get(12), 4);
  AddPaths (n.Get(11), n.Get(12), 4);

  SetLocation (n.Get (2),    -2,   -2);
  SetLocation (n.Get (3),    -2,    2);
  SetLocation (n.Get (4),     2,    2);
  SetLocation (n.Get (5),   2.5,    0);
  SetLocation (n.Get (6),   1.5, -1.5);
  SetLocation (n.Get (7),     0, -1.5);
  SetLocation (n.Get (8),  -1.5,   -1);
  SetLocation (n.Get (9),  -1.5,    1);
  SetLocation (n.Get (10), -0.5,  1.5);
  SetLocation (n.Get (11),  0.5,  1.5);
  SetLocation (n.Get (12),  1.5,    0);
  SetLocation (n.Get (13),  0.5, -0.5);
  SetLocation (n.Get (14), -0.5, -0.5);
  SetLocation (n.Get (15), -0.5,  0.5);
  SetLocation (n.Get (16),  0.5,  0.5);

  Config::SetDefault ("ns3::OnOffApplication::PacketSize", UintegerValue (60));
  Config::SetDefault ("ns3::OnOffApplication::DataRate", StringValue ("48kb/s"));

  FlowMonitorHelper flowmonHelper;
  Ptr<FlowMonitor> flowmon = flowmonHelper.Install (routersAndServer);

  AnimationInterface anim;
  anim.SetOutputFile ("anim3.nam");
  anim.StartAnimation ();

  Simulator::Schedule (Seconds(0.04), &Start);
  Simulator::Schedule (Seconds(0.04), &Stress);
  Stats (flowmon);

  trunkTrace.open ("stress-trunk3.csv");
  trunkTrace << "Trunk,Node1,Node2,Start,Finish;" << std::endl;

  trace.open ("stress-flows3.csv");
  trace << "time,avgSumDelay,txBytes,rxBytes,txPackets,rxPackets,lostPackets,dropBytes;" << std::endl;

  Simulator::Run ();
  
  trunkTrace.close ();
  trace.close ();
  
  Simulator::Destroy ();

  std::cout << "Total trunks " << totalTrunks << std::endl;
  std::cout << "Total calls " << calls.size () << std::endl;  

  return 0;
}
